module Giftcard where

import ERC20
import ERC721
import Service

import DA.Map as Map
import DA.List as List
import DA.Optional

template Giftcard
  with
    tokenPayment : Map Int Decimal -- map[tokenID] payment(권종)
    tokenBalance : Map Int Decimal -- map[tokenID] balance(잔고)

    --token Info
    uuid : Text
    tokenIndex : Int
    serviceName : Text
    ftBlockchainAddr : Text
    nftBlockchainAddr : Text
    
    -- for user
    userIDs : [Party]
    -- for admin
    issuer: Party
    operator: Party
    observers : [Party]
  where
    signatory issuer
    observer operator, observers, userIDs

    controller operator can
      InsertGiftcardUser : ContractId Giftcard
        with
          userID : Party
        do
          assertMsg "userID is already exist" (userID `notElem` userIDs)

          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          _ <- exercise fetchedERC20Cid ERC20.InsertUser with ..
          _ <- exercise fetchedERC721Cid ERC721.InsertUser with ..

          create this with
            userIDs = userID :: userIDs

      DeleteGiftcardUser : ContractId Giftcard
        with
          userID : Party
        do
          assertMsg "userID is not exist" (userID `List.elem` userIDs)

          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          _ <- exercise fetchedERC20Cid ERC20.DeleteUser with ..
          _ <- exercise fetchedERC721Cid ERC721.DeleteUser with ..

          create this with
            userIDs = List.delete userID userIDs

      InsertGiftcardAddress : ContractId Giftcard
        with
          address : Text
        do
          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          _ <- exercise fetchedERC20Cid ERC20.InsertAddress with ..
          _ <- exercise fetchedERC721Cid ERC721.InsertAddress with ..

          create this

      DeleteGiftcardAddress : ContractId Giftcard
        with
          address : Text
        do
          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          _ <- exercise fetchedERC20Cid ERC20.DeleteAddress with ..
          _ <- exercise fetchedERC721Cid ERC721.DeleteAddress with ..

          create this
          

    controller issuer can
      SetupBlockChain : ContractId Giftcard
        with
          ftBlockChain : Text
          nftBlockChain : Text
        do
          create this with
            ftBlockchainAddr = ftBlockChain
            nftBlockchainAddr = nftBlockChain
            
      GiftcardMint : ContractId Giftcard
        with
          fromAddress: Text
          toAddress : Text
          fromID :Party
          toID : Party
          -- userAddress : Text
          amount : Decimal
          url: Text
        do
          (fetchedERC20Cid, fetchedERC20) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          assertMsg "balance is not enough" (Map.lookup fromAddress fetchedERC20.balances >= Some amount)

          _ <- exercise fetchedERC721Cid ERC721.Mint with
            address = toAddress
            userID = toID
            ..
          _ <- exercise fetchedERC20Cid ERC20.TransferERC20_Delegate with
            ..  

          create this with
            tokenPayment = Map.insert tokenIndex amount tokenPayment
            tokenBalance = Map.insert tokenIndex amount tokenPayment
            tokenIndex = tokenIndex + 1

      GiftcardBurn : ContractId Giftcard
        with
          address : Text
          userID : Party
          -- userAddress : Text
          tokenID : Int
        do
          assertMsg "tokenID is not exist" (Map.member tokenID tokenPayment)
          assertMsg "tokenBalance is not 0" (Map.lookup tokenID tokenBalance == Some 0.0)

          -- let balance = fromSome (Map.lookup tokenID tokenBalance) - amount

          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          _ <- exercise fetchedERC721Cid ERC721.Burn with
            ..

          create this with 
            -- tokenBalance = Map.insert tokenID balance tokenBalance
            tokenBalance = Map.delete tokenID tokenBalance
      
    -- 전송
    choice GiftcardTransfer : ContractId Giftcard
      with
        fromID : Party
        fromAddress : Text
        toID : Party
        toAddress : Text
        tokenID : Int
        amount : Decimal
      controller fromID
        do
          assertMsg "tokenID is not exist" (Map.member tokenID tokenPayment)

          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)

          assertMsg "tokenBalance is not enough" (Map.lookup tokenID tokenBalance >= Some amount)

          let balance = fromSome (Map.lookup tokenID tokenBalance) - amount

          _ <- exercise fetchedERC20Cid TransferERC20 with
            ..

          create this with
            tokenBalance = Map.insert tokenID balance tokenBalance

    -- 양도
    choice GiftcardAssignment : ContractId Giftcard
      with
        fromID : Party
        fromAddress : Text
        toID : Party
        toAddress : Text
        tokenID : Int
      controller fromID
        do
          assertMsg "tokenID is not exist" (Map.member tokenID tokenPayment)

          (fetchedERC20Cid, _) <- fetchByKey @ERC20 (issuer, uuid)
          (fetchedERC721Cid, _) <- fetchByKey @ERC721 (issuer, uuid)

          erc20 <- fetch fetchedERC20Cid 
          let fromBalance = fromSome (Map.lookup tokenID tokenBalance)

          _ <- exercise fetchedERC721Cid TransferERC721 with
            ..

          _ <- exercise fetchedERC20Cid TransferERC20 with
            amount = fromBalance
            ..

          create this

operatorTest = scenario do
  owner <- getParty "owner"
  issuer <- getParty "issuer"
  operator <- getParty "operator"
  shinhanBank <- getParty "shinhanBank"
  shinhanCard <- getParty "shinhanCard"

  let serviceName = "Shinhan Gift Card"
  let tokenSymbol = "SGC"
  let category = "금융"
  let uuid = "0xUUID"
  let ownerAddress = "0xOwner"
  let issuerAddress = "0xIssuer"

  -- create service
  giftcardServiceRequestCid <- issuer `submit` do
    create ServiceRequest with
      observers = [operator,issuer]
      totalSupply = 1000000.0
      attribute =(empty : Map Text Bool)
      symbolImage = "HCT"
      serviceType = "serviceType"
      ..

  giftcardServiceProposalCid <- issuer `submit` do
    exercise giftcardServiceRequestCid Invite with signatories = [issuer, operator, shinhanBank, shinhanCard]

  giftcardServiceProposalCid <- shinhanBank `submit` do
    exercise giftcardServiceProposalCid Sign with signer = shinhanBank

  giftcardServiceProposalCid <- shinhanCard `submit` do
    exercise giftcardServiceProposalCid Sign with signer = shinhanCard

  giftcardServiceProposalCid <- operator `submit` do
    exercise giftcardServiceProposalCid Sign with signer = operator

  giftcardServiceCid <- submit issuer do
    exercise giftcardServiceProposalCid Finalize with signer = issuer
  
  -- create erc20
  erc20Cid <- submit issuer do
    create ERC20 with
      observers = [operator, issuer]
      decimals = 0
      pausable = True
      mintable = True
      burnable = True
      delegable = True
      dividable = True
      distributable = True
      totalSupply = 0.0
      balances = (empty : Map Text Decimal)
      blockchainAddr = "0xBESU"
      userIDs = []
      lockedUserIDs = []
      symbolImage = "HCP"
      owner = issuer
      ownerAddress = issuerAddress
      ..

  erc20Cid <- submit operator do
    exercise erc20Cid ERC20.InsertUser with
      userID = issuer

  erc20Cid <- submit operator do
    exercise erc20Cid ERC20.InsertAddress with
      address = issuerAddress

  erc20Cid <- submit operator do
    exercise erc20Cid ERC20.InsertUser with
      userID = owner

  erc20Cid <- submit operator do
    exercise erc20Cid ERC20.InsertAddress with
      address = ownerAddress

  erc20Cid <- submit issuer do
    exercise erc20Cid ERC20.Mint with
      userID = issuer
      address = issuerAddress
      amount = 1000000.0

  erc20Cid <- submit issuer do
    exercise erc20Cid ERC20.Mint with
      userID = issuer
      address = issuerAddress
      amount = 10000.0

  -- create erc721
  erc721Cid <- submit issuer do
    create ERC721 with
      symbolImage = "HP"
      pausable = True
      mintable = True
      burnable = True
      distributable = True
      dividable = True
      decimals = 0
      delegable = True
      tokenOwners = (empty : Map Int Text)
      holderTokens = (empty : Map Text [Int])
      blockchainAddr = "0xBESU"
      baseURI = ""
      tokenURIs = (empty : Map Int Text)
      userIDs = []
      lockedUserIDs = []
      tokenIndex = 1
      observers = [operator]
      ..

  erc721Cid <- submit operator do
    exercise erc721Cid ERC721.InsertUser with
      userID = issuer

  erc721Cid <- submit operator do
    exercise erc721Cid ERC721.InsertAddress with
      address = issuerAddress

  erc721Cid <- submit operator do
    exercise erc721Cid ERC721.InsertUser with
      userID = owner

  erc721Cid <- submit operator do
    exercise erc721Cid ERC721.InsertAddress with
      address = ownerAddress

  -- create giftcard
  giftcardCid <- submit issuer do
    create Giftcard with 
      tokenPayment = (empty : Map Int Decimal)
      tokenBalance = (empty : Map Int Decimal)
      userIDs = [issuer, owner]
      observers = []
      tokenIndex = 1
      ftBlockchainAddr = "testFT"
      nftBlockchainAddr = "testNFT"
      ..

  -- mint 
  giftcardCid <- submit issuer do
    exercise giftcardCid GiftcardMint with
      toAddress = "0xOwner"
      fromAddress ="0xIssuer"
      toID = owner
      fromID = issuer
      -- userAddress = ownerAddress
      amount = 10000.0
      url="text"

  giftcardCid <- submit issuer do
    exercise giftcardCid GiftcardMint with
      toAddress = "0xOwner"
      fromAddress ="0xIssuer"
      toID = owner
      fromID = issuer
      -- userAddress = ownerAddress
      amount = 10000.0
      url="text"

  -- assignment
  giftcardCid <- submit owner do
    exercise giftcardCid GiftcardAssignment with
      fromID = owner
      fromAddress = ownerAddress
      toID = issuer
      toAddress = issuerAddress
      tokenID = 1

  -- transfer
  giftcardCid <- submit issuer do
    exercise giftcardCid GiftcardTransfer with
      fromID = issuer
      fromAddress = issuerAddress
      toID = owner
      toAddress = ownerAddress
      tokenID = 2
      amount = 10000.0

  -- burn
  giftcardCid <- submit issuer do
    exercise giftcardCid GiftcardBurn with
      address = "0xOwner"
      userID = issuer
      -- userAddress = issuerAddress
      tokenID = 2
      -- amount = 5000.0

  submit issuer do
    giftcard <- fetch giftcardCid
    assert (giftcard.issuer == issuer)